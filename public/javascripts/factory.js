// Generated by CoffeeScript 1.3.3
(function() {
  var DEFAULT_SLIDE, Editor, MainMenu, Presentation, Router, SlideViewer, SlidesBrowser,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Factory = {
    open: function(presentation, slideNumber) {
      this.currentPresentation = presentation;
      return Factory.trigger('slide:navigate', slideNumber);
    }
  };

  _.extend(Factory, Backbone.Events);

  DEFAULT_SLIDE = "# Introducing Factory\n\nFactory is an in-browser slide creation and\npublishing tool.\n\nNo server setup required. Slides are served straight from\nyour browser.";

  Editor = (function(_super) {

    __extends(Editor, _super);

    function Editor() {
      return Editor.__super__.constructor.apply(this, arguments);
    }

    Editor.prototype.initialize = function() {
      var _this = this;
      Factory.on('slide:added', function(markdown) {
        return _this.open(markdown);
      });
      return this.trackTextAreaChanges();
    };

    Editor.prototype.open = function(markdown) {
      return this.$el.val(markdown);
    };

    Editor.prototype.trackTextAreaChanges = function() {
      var _this = this;
      return this.$el.on('keyup change cut paste', function() {
        return Factory.trigger('editor:updated', _this.$el.val());
      });
    };

    return Editor;

  })(Backbone.View);

  SlideViewer = (function(_super) {

    __extends(SlideViewer, _super);

    function SlideViewer() {
      return SlideViewer.__super__.constructor.apply(this, arguments);
    }

    SlideViewer.prototype.initialize = function() {
      var _this = this;
      Factory.on('editor:updated', function(markdown) {
        return _this.updateSlide(markdown);
      });
      return Factory.on('slide:added', function(markdown) {
        return _this.createSlide(markdown);
      });
    };

    SlideViewer.prototype.createSlide = function(markdown) {
      var $slide;
      this.$el.empty();
      this._currentSlide = $slide = $(this.make('div', {
        "class": 'slide'
      }));
      this.$el.append($slide);
      return this.updateSlide(DEFAULT_SLIDE);
    };

    SlideViewer.prototype.currentSlide = function() {
      var _ref;
      return (_ref = this._currentSlide) != null ? _ref : this._currentSlide = this.$el.find('.slide');
    };

    SlideViewer.prototype.updateSlide = function(markdown) {
      return this.currentSlide().html(marked(markdown));
    };

    return SlideViewer;

  })(Backbone.View);

  SlidesBrowser = (function(_super) {

    __extends(SlidesBrowser, _super);

    function SlidesBrowser() {
      return SlidesBrowser.__super__.constructor.apply(this, arguments);
    }

    SlidesBrowser.prototype.template = _.template("<li class=\"icon-star\">\n  <%= summary %>\n  <button class=\"delete icon-trash\"></button>\n</li>");

    SlidesBrowser.prototype.initialize = function() {
      var _this = this;
      Factory.on('slide:added', function(markdown) {
        return _this.addSlide(markdown);
      });
      return Factory.on('slides:toggle', function(showOrHide) {
        return _this.toggleVisible(showOrHide);
      });
    };

    SlidesBrowser.prototype.addSlide = function(markdown) {
      var $li;
      $li = $(this.template({
        summary: this.makeSummary(markdown)
      }));
      return this.$el.append($li);
    };

    SlidesBrowser.prototype.toggleVisible = function(showOrHide) {
      if (showOrHide === 'show') {
        return this.$el.fadeIn(250);
      } else if ('hide') {
        return this.$el.fadeOut(100);
      }
    };

    SlidesBrowser.prototype.makeSummary = function(markdown) {
      var $placeholder;
      $placeholder = $('<div></div>').html(marked(markdown));
      return $placeholder.find('*:first-child').text();
    };

    SlidesBrowser.prototype.empty = function() {
      return this.$el.find('li').remove();
    };

    return SlidesBrowser;

  })(Backbone.View);

  MainMenu = (function(_super) {

    __extends(MainMenu, _super);

    function MainMenu() {
      return MainMenu.__super__.constructor.apply(this, arguments);
    }

    MainMenu.prototype.events = {
      'click .show-slides': 'toggleSlides',
      'click .new-slide': 'requestNewSlide'
    };

    MainMenu.prototype.toggleSlides = function() {
      var $button;
      $button = $(event.target);
      if ($button.hasClass('section-visible')) {
        $button.toggleClass('section-visible', false);
        return Factory.trigger('slides:toggle', 'hide');
      } else {
        $button.toggleClass('section-visible', true);
        return Factory.trigger('slides:toggle', 'show');
      }
    };

    MainMenu.prototype.requestNewSlide = function() {
      return Factory.trigger('slide:request');
    };

    return MainMenu;

  })(Backbone.View);

  Presentation = (function(_super) {

    __extends(Presentation, _super);

    function Presentation() {
      return Presentation.__super__.constructor.apply(this, arguments);
    }

    Presentation.prototype.initialize = function() {
      var _this = this;
      Factory.on('slide:request', function() {
        return _this.addSlide(DEFAULT_SLIDE);
      });
      if (!this.isNew()) {
        this.set('id', this.makeUniqueId());
      }
      this.localStorage = new Backbone.LocalStorage(this.id);
      return this.makeFirstSlide();
    };

    Presentation.prototype.makeUniqueId = function() {
      return Math.random().toString(36).substring(6).toUpperCase();
    };

    Presentation.prototype.makeFirstSlide = function() {
      return this.addSlide(DEFAULT_SLIDE);
    };

    Presentation.prototype.addSlide = function(markdown) {
      var slides;
      if (this.has('slides')) {
        slides = this.get('slides');
        slides.push(markdown);
        this.set('slides', slides);
      } else {
        this.set('slides', [markdown]);
      }
      return Factory.trigger('slide:added', markdown);
    };

    return Presentation;

  })(Backbone.Model);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      '': 'home',
      'new': 'new',
      ':id': 'open',
      ':id/:slide': 'openSlide'
    };

    Router.prototype.home = function() {
      return this.navigate('/new', true);
    };

    Router.prototype["new"] = function() {
      return Factory.open(new Presentation, 0);
    };

    return Router;

  })(Backbone.Router);

  $(function() {
    Factory.Editor = new Editor({
      el: $('.writing textarea')
    });
    Factory.SlideViewer = new SlideViewer({
      el: $('.slide-container')
    });
    Factory.SlidesBrowser = new SlidesBrowser({
      el: $('.authoring .slides')
    });
    Factory.MainMenu = new MainMenu({
      el: $('.authoring menu')
    });
    new Router;
    return Backbone.history.start({
      pushState: true
    });
  });

}).call(this);
